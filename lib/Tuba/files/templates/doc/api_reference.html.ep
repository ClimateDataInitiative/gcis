<% my $placeholder_link = begin %><% my $which = shift; %><b>:<%= $which%></b><% end %>
<% my $wildcard_link = begin %><% my $which = shift; %><b>:<%= $which%></b><% end %>
<% my $relaxed_link = begin %><% my $which = shift; %><b>:<%= $which%></b><% end %>

% layout 'default', fixed => 1, title => "GCIS API Reference";
<h2 class='centered'>API Reference</h2>
<p>Below is a list of methods and URLs supported by the GCIS.
  The current version of this API is <b><%= $Tuba::VERSION %></b>.</p>
<p>For definitions of the terms below, please read about the <a href="/resources">data model</a>.</p>
<p>Click the method name on the left to see more information about a particular route.</p>
<p>There are also
<%= link_to url_with.'.json' => class => 'label label-info' => begin %>JSON<%= end %> and
<%= link_to url_with.'.yaml' => class => 'label label-info' => begin %>YAML<%= end %> versions of
this page which may be viewed using <%= link_to 'http://petstore.swagger.io?url='.$self->req->url->to_abs.'.json' => begin %>
swagger<%= end %>.


% my $show_method = ( (param 'show_method') || 'GET');
<ul class='nav nav-tabs'>
<li <%== $show_method eq 'GET' ? q[class="active"] : "" %>>
%= link_to url_for('current')->query(show_method => 'GET') => begin
GET
%= end
</li>
% if (user_can('update')) {
<li <%== $show_method eq 'POST' ? q[class="active"] : "" %>>
%= link_to url_for('current')->query(show_method => 'POST') => begin
POST
%= end
</li>
<li <%== $show_method eq 'DELETE' ? q[class="active"] : "" %>>
%= link_to url_for('current')->query(show_method => 'DELETE') => begin
DELETE
%= end
</li>
% }

</ul>

<div class="row-fluid">
<div class="span12">
%#-----------------------------------------------------------------
% my $show_node = begin
  % my $node = shift;
    <% for my $piece (@{ $node->pattern->tree }) {
    %><%= !ref $piece                  ? $piece
        : $piece->[0] eq 'slash'       ? '/'
        : $piece->[0] eq 'text'        ? $piece->[1]
        : $piece->[0] eq 'placeholder' ? $placeholder_link->($piece->[1])
        : $piece->[0] eq 'wildcard'    ? $wildcard_link->($piece->[1])
        : $piece->[0] eq 'relaxed'     ? $relaxed_link->($piece->[1])
        : 'other'; =%><% } %>
% end

% my $show_methods = param 'show_methods';
% my $walk = begin
  % my ($walk, $route, $depth, $rows) = @_;
  % return if $route->name =~ /^_/;
  % return if $route->name =~ /^(gcid_lookup|index|try|calculate_url|login|logout|forms|examples|api_reference|resources|import_form|(open)?search|about|sparql|reference_updates_report|admin)$/;
  % unless (user_can('update')) {
  %     return if $route->name =~ m[^((create|update)_(prov_|rel_|files_|contributors_|keywords_)?form)];
  %     return if $route->name =~ m[^autocomplete$];
  %     return if $route->name =~ m[^history_];
  % }

  % my $prefix = '';
  % if (my $i = $depth * 2) { $prefix .= ' ' x $i . '+' }
  % push @$rows, my $row = [$prefix . ($route->pattern->unparsed || '/')];

  % my @via = @{ $route->via || [] };
  % if ($route->is_endpoint && grep /$show_method/, @via) {
      <tr <%== $trying && $trying->name eq $route->name ? q[class="info"] : '' %>>
         <td>
             <%= link_to url_for('current')->query([try => $route->name]) => begin %>
             <%= uc(join ',', @via) %>
             <%= end %>
         </td>
         <td>
           % if (my $p = $route->parent) {
           % my @p;
           %    while ($p) {
           %        unshift @p, $p;
           %        $p = $p->parent;
           %    }
           % for my $q (@p) {
                 <%= $show_node->($q) %>
           %    }
           % }
           %= $show_node->($route)
         </td>
         <td>
          % if (my $doc = doc_for($route->name)) {
          %= $doc->brief;
          % }
         </td>
       </tr>
   % }

   % $depth++;
   %= $walk->($walk, $_, $depth, $rows) for @{$route->children};
   % $depth--;
% end
%#-----------------------------------------------------------------

<table class='table table-condensed table-striped'>
  <tr>
    <th>Methods</th>
    <th>Path</th>
    <th>Description</th>
  </tr>
  %= $walk->($walk, $_, 0) for @{app->routes->children};
 </table>
</div>
</div>
% if ($trying) {
<div class="modal">
    <div class="modal-header">
        <%= link_to url_for('current') => class => 'close' => begin %>&times;<%= end %>
        <h3><%= $trying->name %></h3>
  </div>
    % my $defaults = $trying->pattern->defaults;
    <div class='well'>
        % if (my $doc = doc_for($trying->name)) {
            <p><%= $doc->description %></p>
            % if (my $params = $doc->params) {
                <div class='alert alert-info'>
                    Parameters :<br>
                    % if (@$params==0) {
                    none
                    % } else {
                        % for my $p (@$params) {
                            <%= $p->name %> (<%= $p->type %>) : <%= $p->description %><br>
                        % }
                    % }
               </div>
            % }
            % if (my $note = $doc->note) {
            <p> Note:
             %= $note
            </p>
            % }
        % }
        %= form_for 'try', method => 'POST', id => "theform", class => "form-horizontal" => begin
            %= hidden_field '_route_name' => $trying->name;
            % for my $p (@{ (stash 'placeholders') }) {
                <div class="control-group">
                    <label class="control-label" for="<%= $p %>"><%= $p %></label>
                    <div class="controls">
                        <%= text_field $p, value => $defaults->{$p} || ''%>
                    </div>
                </div>
            % }
            <div class="control-group">
                <div class="controls">
                %= submit_button 'GET json', class => 'btn btn-primary', onclick => '{return tryit("json");}'
                %= submit_button 'GET html', class => 'btn btn-primary', onclick => '{return tryit("text");}'
                </div>
            </div>
        %= end
        <pre id='request_url' style='display:none;'></pre>
        <pre id='results' style='display:none;'></pre>
        </div>
</div>
% }
</div>

%= javascript begin
function tryit(request_data_type) {
    $.post('<%= url_for('calculate_url') %>', $('#theform').serialize(),
        function(data) {
    }).done(function(data) {
         var request_url = data.path;
         $('#request_url').html('GET <a href="' + request_url.htmlEscape() + '">' + request_url.htmlEscape() + '</a>');
         if (request_data_type == 'json') {
            try_get_json(request_url);
         } else {
            try_get_html(request_url);
         }
    })
    .fail(function(d) {
         $('#results').text('error computing URL : ' + JSON.stringify(d));
    })
    .always(function() {
         $('#request_url').attr('style','display:block;');
         $('#results').attr('style','display:block;')
     });

    return false;
}

function try_get_json(request_url) {
    $.ajax({
        type : "GET",
        url : request_url,
        dataType : "json"
   }).done(function(data) {
        $('#results').text(JSON.stringify(data,null,'\t'))
   }).fail(function(d) {
         $('#results').text('error getting data : ' + JSON.stringify(d));
   });
}

function try_get_html(request_url) {
    $.ajax({
        type : "GET",
        url : request_url,
        dataType : "html"
   }).done(function(data) {
        $('#results').text(data)
   }).fail(function(d) {
         $('#results').text('error getting data : ' + JSON.stringify(d));
   });
}


%= end
</html>


