#!/usr/bin/env perl

use lib '../lib';
use Tuba::DB::Objects qw/-nicknames/;
use JSON::XS;
use Path::Class qw/dir file/;
use Text::CSV_XS;
use Data::Dumper;

use strict;
use warnings;

Files->delete_objects(all => 1);
Images->delete_objects(all => 1);
Figures->delete_objects(all => 1);
Chapters->delete_objects(all => 1);
Reports->delete_objects(all => 1);

# One ring to rule them all
my $report = Report->new(
    identifier => "nca3",
    title      => "National Climate Assessment number three",
);
$report->save or die $report->error;

# Chapters
my $chapters = '/var/local/projects/tuba/data/chapters.csv';
my @chapters;
open my $fh, "<:encoding(utf8)", $chapters  or die "$chapters : $!";
my $csv = Text::CSV_XS->new({ binary => 1, allow_whitespace => 1 });
my $header = $csv->getline($fh);
my %row;
while (my $row = $csv->getline($fh)) {
    @row{@$header} = @$row;
    my $ch = Chapter->new(
        identifier => $row{q[chapter-short-name]},
        title      => $row{q[chapter-long-name]},
        report_id  => $report->id
    );
    $ch->title =~ /^(\d+)/ and $ch->number($1);
    $ch->save or die $ch->error;
    push @chapters, $ch;
}
$csv->eof or $csv->error_diag ();
close $fh;

# Figures
my $map = JSON::XS->new->decode(scalar file('/var/local/projects/tuba/data/image_map.json')->slurp);
for my $uri (keys %$map) {
   $uri =~ m[/report/nca2013/chapter/(\d+)/figure/(\d+)>] or die "could not match $uri";
   my ($chapter_number, $figure_ordinal) = ($1,$2);
   my $filename = $map->{$uri};
   my ($chapter) = grep { $_->title =~ /^$chapter_number\. / } @chapters;
   die "could not find chapter for '$chapter_number'" unless $chapter;
   my $figure = Figure->new(
       chapter_id => $chapter->id,
       ordinal => $figure_ordinal,
   );
   $figure->save;
   my $image = Image->new( figure_id => $figure->id );
   $image->save or die $image->error;
   my $file = File->new( image_id => $image->id, file => $filename);
   $file->save or die $file->error;
}

# Images
my $dir = dir '/var/local/projects/tuba/data/images';
for my $file ($dir->children) {
    my $f = Tuba::DB::Object::File->new(file => $file->basename);
    $f->save or die $f->error;
}

1;

